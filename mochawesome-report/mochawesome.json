{
  "stats": {
    "suites": 10,
    "tests": 49,
    "passes": 42,
    "pending": 0,
    "failures": 7,
    "start": "2022-12-15T17:02:51.424Z",
    "end": "2022-12-15T17:02:51.567Z",
    "duration": 143,
    "testsRegistered": 49,
    "passPercent": 85.71428571428571,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "df1372b5-380f-4d0a-8d07-31dabdbb3e95",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4f662489-02bd-4220-aedd-55647fb4ec0f",
          "title": "Convert the string from upper case to lower case ",
          "fullFile": "D:\\3rd sem\\software testing\\assignment\\Software-Testing\\test\\add.test.js",
          "file": "\\test\\add.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "add 2 positive number",
              "fullTitle": "Convert the string from upper case to lower case  add 2 positive number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(10,11)).to.equal(21);",
              "err": {},
              "uuid": "c9447fa1-a2b7-4a8e-9c17-8df402f74ce7",
              "parentUUID": "4f662489-02bd-4220-aedd-55647fb4ec0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "add negative number",
              "fullTitle": "Convert the string from upper case to lower case  add negative number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(7,-3)).to.equal(4);",
              "err": {},
              "uuid": "628498a9-755a-49b8-a4b2-bd063232eced",
              "parentUUID": "4f662489-02bd-4220-aedd-55647fb4ec0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "add decimal number to another decimal number",
              "fullTitle": "Convert the string from upper case to lower case  add decimal number to another decimal number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(0.00009,0.001)).to.equal(0.00109);",
              "err": {},
              "uuid": "ef889b77-3ab9-47b7-bde9-3d7b5e047500",
              "parentUUID": "4f662489-02bd-4220-aedd-55647fb4ec0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "add float to negative of the float, returns zero",
              "fullTitle": "Convert the string from upper case to lower case  add float to negative of the float, returns zero",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(1.05, -1.05)).to.equal(0);",
              "err": {},
              "uuid": "86df08a9-a24c-4059-9f38-a3c8de5ecec8",
              "parentUUID": "4f662489-02bd-4220-aedd-55647fb4ec0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "it returns zero if the inputs are empty",
              "fullTitle": "Convert the string from upper case to lower case  it returns zero if the inputs are empty",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add()).to.equal(0);",
              "err": {},
              "uuid": "962b2f9f-325d-4bff-ad94-482392330f9f",
              "parentUUID": "4f662489-02bd-4220-aedd-55647fb4ec0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "adding of the string throws a type error",
              "fullTitle": "Convert the string from upper case to lower case  adding of the string throws a type error",
              "timedOut": false,
              "duration": 3,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(() =>{ add(\"Degree Celcius\", 0) }).to.throw(TypeError);",
              "err": {
                "message": "AssertionError: expected [Function] to throw TypeError",
                "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///D:/3rd%20sem/software%20testing/assignment/Software-Testing/test/add.test.js:27:53)\n    at processImmediate (node:internal/timers:464:21)",
                "diff": null
              },
              "uuid": "0270ec50-0a22-43a9-b957-3ad8c1d79db5",
              "parentUUID": "4f662489-02bd-4220-aedd-55647fb4ec0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "add positive integer to negative float, returns float with correct sign",
              "fullTitle": "Convert the string from upper case to lower case  add positive integer to negative float, returns float with correct sign",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(11, -2.65)).to.equal(8.35);",
              "err": {},
              "uuid": "4bc6de7d-d649-4695-893a-e5600ed2ce79",
              "parentUUID": "4f662489-02bd-4220-aedd-55647fb4ec0f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c9447fa1-a2b7-4a8e-9c17-8df402f74ce7",
            "628498a9-755a-49b8-a4b2-bd063232eced",
            "ef889b77-3ab9-47b7-bde9-3d7b5e047500",
            "86df08a9-a24c-4059-9f38-a3c8de5ecec8",
            "962b2f9f-325d-4bff-ad94-482392330f9f",
            "4bc6de7d-d649-4695-893a-e5600ed2ce79"
          ],
          "failures": [
            "0270ec50-0a22-43a9-b957-3ad8c1d79db5"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f1b86147-6575-4cd4-afcf-09407c87444b",
          "title": "Convert the string from upper case to lower case ",
          "fullFile": "D:\\3rd sem\\software testing\\assignment\\Software-Testing\\test\\capitalize.test.js",
          "file": "\\test\\capitalize.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "convert the first string to the Upper case",
              "fullTitle": "Convert the string from upper case to lower case  convert the first string to the Upper case",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const string = capitalize(\"upper case string\");\nexpect(string).contain(\"Upper case string\");",
              "err": {},
              "uuid": "c2866dfe-85ba-4d22-8d2c-d58f43229413",
              "parentUUID": "f1b86147-6575-4cd4-afcf-09407c87444b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "convert the first string to the Upper case and remaining to lower case",
              "fullTitle": "Convert the string from upper case to lower case  convert the first string to the Upper case and remaining to lower case",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const string = capitalize(\"uPPER CASE STRING\");\nexpect(string).contain(\"Upper case string\");",
              "err": {},
              "uuid": "d7fd0646-0c67-44cf-98d0-368829258a7f",
              "parentUUID": "f1b86147-6575-4cd4-afcf-09407c87444b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c2866dfe-85ba-4d22-8d2c-d58f43229413",
            "d7fd0646-0c67-44cf-98d0-368829258a7f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ac15dd4d-6d86-4752-b02e-c00a879418cd",
          "title": "Round up: the smallest integer greater than or equal to a given number.",
          "fullFile": "D:\\3rd sem\\software testing\\assignment\\Software-Testing\\test\\ceil.test.js",
          "file": "\\test\\ceil.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "round float with integer returns float",
              "fullTitle": "Round up: the smallest integer greater than or equal to a given number. round float with integer returns float",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(ceil(6.004,2)).to.eq(6.01);",
              "err": {},
              "uuid": "13812bb9-bb05-435f-b9a7-a065ec643b2e",
              "parentUUID": "ac15dd4d-6d86-4752-b02e-c00a879418cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "round up the float with empty value unchange the value",
              "fullTitle": "Round up: the smallest integer greater than or equal to a given number. round up the float with empty value unchange the value",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(ceil(4.0001)).to.eq(5);",
              "err": {},
              "uuid": "da5619d5-07a9-424d-a7bb-aa9c6acd602c",
              "parentUUID": "ac15dd4d-6d86-4752-b02e-c00a879418cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "round up the integer with empty value unchange the value",
              "fullTitle": "Round up: the smallest integer greater than or equal to a given number. round up the integer with empty value unchange the value",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(ceil(4)).to.eq(4);",
              "err": {},
              "uuid": "e891cb3e-c51e-435c-a25c-c0faaff74ed1",
              "parentUUID": "ac15dd4d-6d86-4752-b02e-c00a879418cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "round integer with integer returns same integer",
              "fullTitle": "Round up: the smallest integer greater than or equal to a given number. round integer with integer returns same integer",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(ceil(4, 1)).to.equal(4);",
              "err": {},
              "uuid": "ee01c70b-f3a4-431f-ac0b-4d5a20fcad1b",
              "parentUUID": "ac15dd4d-6d86-4752-b02e-c00a879418cd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "13812bb9-bb05-435f-b9a7-a065ec643b2e",
            "da5619d5-07a9-424d-a7bb-aa9c6acd602c",
            "e891cb3e-c51e-435c-a25c-c0faaff74ed1",
            "ee01c70b-f3a4-431f-ac0b-4d5a20fcad1b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3c31dd0a-824d-4b24-a463-078aba19c7f0",
          "title": "Creates an array with all falsey values removed",
          "fullFile": "D:\\3rd sem\\software testing\\assignment\\Software-Testing\\test\\compact.test.js",
          "file": "\\test\\compact.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "remove the falsy value from the array",
              "fullTitle": "Creates an array with all falsey values removed remove the falsy value from the array",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(compact([0, '-1', 1, false, 2, '', 3])).to.deep.equal([1, 2, 3]);\nexpect(compact([0, '-1', 1, false, 2, '', 3])).to.be.an('array');",
              "err": {},
              "uuid": "e37a25a2-b5db-4235-9d31-ff9b82896008",
              "parentUUID": "3c31dd0a-824d-4b24-a463-078aba19c7f0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e37a25a2-b5db-4235-9d31-ff9b82896008"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "47470c7d-4a86-4a2d-81a1-ae5cd7adf896",
          "title": "CountBy",
          "fullFile": "D:\\3rd sem\\software testing\\assignment\\Software-Testing\\test\\countBy.test.js",
          "file": "\\test\\countBy.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Counts the number of objects with given attribute in an array of objects",
              "fullTitle": "CountBy Counts the number of objects with given attribute in an array of objects",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(\n  countBy(\n    [\n      { user: 'barney', active: true },\n      { user: 'betty', active: true },\n      { user: 'fred', active: false },\n    ],\n    (value) => value.active\n  )\n).to.deep.equal({ true: 1, false: 0 });",
              "err": {},
              "uuid": "56022e09-6d8a-4517-a045-c8be134cffbf",
              "parentUUID": "47470c7d-4a86-4a2d-81a1-ae5cd7adf896",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "56022e09-6d8a-4517-a045-c8be134cffbf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b76aab29-2eae-439f-9c0d-825c75533888",
          "title": "Function of dropping an array via an arg",
          "fullFile": "D:\\3rd sem\\software testing\\assignment\\Software-Testing\\test\\drop.test.js",
          "file": "\\test\\drop.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "dropping empty array gives back an empty array",
              "fullTitle": "Function of dropping an array via an arg dropping empty array gives back an empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let result = drop({ length: 0 }, 0)\nexpect(result).to.deep.eq([])",
              "err": {},
              "uuid": "d32c8c48-eb27-4105-952c-17dac6b64d44",
              "parentUUID": "b76aab29-2eae-439f-9c0d-825c75533888",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "dropping an array with negative integer gives undefined",
              "fullTitle": "Function of dropping an array via an arg dropping an array with negative integer gives undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let result = drop({ length: 1 }, -1)\nexpect(result).to.deep.eq([undefined])",
              "err": {},
              "uuid": "3e9b981b-2e7e-45d0-ab59-a8cb6970876a",
              "parentUUID": "b76aab29-2eae-439f-9c0d-825c75533888",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Dropping an array with NaN gives back an empty array",
              "fullTitle": "Function of dropping an array via an arg Dropping an array with NaN gives back an empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let result = drop({ length: NaN }, NaN)\nexpect(result).to.deep.eq([])",
              "err": {},
              "uuid": "377741bb-9620-48f6-8b0c-19605a196300",
              "parentUUID": "b76aab29-2eae-439f-9c0d-825c75533888",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "dropping an array without providing the integer erase the first element and return back remaining array as resullt",
              "fullTitle": "Function of dropping an array via an arg dropping an array without providing the integer erase the first element and return back remaining array as resullt",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let result = drop([1,2,3]);\nexpect(result).to.deep.eq([2,3])",
              "err": {},
              "uuid": "c8a56dfc-a46e-446d-9537-52be6faf2c0d",
              "parentUUID": "b76aab29-2eae-439f-9c0d-825c75533888",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "dropping an array with binary integer 2 to erase the first  twoelement and return back remaining array as resullt",
              "fullTitle": "Function of dropping an array via an arg dropping an array with binary integer 2 to erase the first  twoelement and return back remaining array as resullt",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let result = drop([1,2,3],\"0b10\");\nexpect(result).to.deep.eq([3])",
              "err": {},
              "uuid": "9b16d71d-e20d-43d9-aae6-0a84bca9ec82",
              "parentUUID": "b76aab29-2eae-439f-9c0d-825c75533888",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d32c8c48-eb27-4105-952c-17dac6b64d44",
            "3e9b981b-2e7e-45d0-ab59-a8cb6970876a",
            "377741bb-9620-48f6-8b0c-19605a196300",
            "c8a56dfc-a46e-446d-9537-52be6faf2c0d",
            "9b16d71d-e20d-43d9-aae6-0a84bca9ec82"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4c8eaf83-b682-4ed1-b4e8-bf8ec80b17b9",
          "title": "Use for searching/filtering the products",
          "fullFile": "D:\\3rd sem\\software testing\\assignment\\Software-Testing\\test\\filter.test.js",
          "file": "\\test\\filter.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Filter the full shopping cart with an invalid predicate throws error",
              "fullTitle": "Use for searching/filtering the products Filter the full shopping cart with an invalid predicate throws error",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(function(){ filter(arrayValue, invalidPredicate) }).to.throw(TypeError);",
              "err": {},
              "uuid": "46ef6c96-a226-48b5-af5d-2a1ddf838ac9",
              "parentUUID": "4c8eaf83-b682-4ed1-b4e8-bf8ec80b17b9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Filter the full shopping cart without predicate throws error",
              "fullTitle": "Use for searching/filtering the products Filter the full shopping cart without predicate throws error",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(function(){ filter(arrayValue, invalidPredicate) }).to.throw(TypeError);",
              "err": {},
              "uuid": "6a52a621-6b3f-4135-8641-f0a11c05920e",
              "parentUUID": "4c8eaf83-b682-4ed1-b4e8-bf8ec80b17b9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Filter the full shopping cart with a predicate taking one arg gives the filtered array",
              "fullTitle": "Use for searching/filtering the products Filter the full shopping cart with a predicate taking one arg gives the filtered array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  expect(function(){ filter(arrayValue, invalidPredicate) }).to.deep.eq(1);\n} catch (e){}",
              "err": {},
              "uuid": "c0eb6b5a-265e-4aed-8922-3125b59b2061",
              "parentUUID": "4c8eaf83-b682-4ed1-b4e8-bf8ec80b17b9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Filtering without arg throws error",
              "fullTitle": "Use for searching/filtering the products Filtering without arg throws error",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect((()=>{ filter()})).to.throw(TypeError);",
              "err": {
                "message": "AssertionError: expected [Function] to throw TypeError",
                "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///D:/3rd%20sem/software%20testing/assignment/Software-Testing/test/filter.test.js:25:41)\n    at processImmediate (node:internal/timers:464:21)",
                "diff": null
              },
              "uuid": "92f12c78-2aaf-4c4d-9546-c3c592c0bc80",
              "parentUUID": "4c8eaf83-b682-4ed1-b4e8-bf8ec80b17b9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "filter a string with a predicate and one arg throw error",
              "fullTitle": "Use for searching/filtering the products filter a string with a predicate and one arg throw error",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(function(){ filter(stringValue, oneArgPredicate) }).to.throw(TypeError);",
              "err": {
                "message": "AssertionError: expected [Function] to throw TypeError",
                "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///D:/3rd%20sem/software%20testing/assignment/Software-Testing/test/filter.test.js:29:74)\n    at processImmediate (node:internal/timers:464:21)",
                "diff": null
              },
              "uuid": "64e4a9c5-3552-4354-a544-e6f305d7daac",
              "parentUUID": "4c8eaf83-b682-4ed1-b4e8-bf8ec80b17b9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Filtering an empty shopping cart without predicate throws error",
              "fullTitle": "Use for searching/filtering the products Filtering an empty shopping cart without predicate throws error",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect((()=>{ filter([])})).to.throw(TypeError);",
              "err": {
                "message": "AssertionError: expected [Function] to throw TypeError",
                "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///D:/3rd%20sem/software%20testing/assignment/Software-Testing/test/filter.test.js:33:43)\n    at processImmediate (node:internal/timers:464:21)",
                "diff": null
              },
              "uuid": "2bc9fea5-dbb7-4d74-9a59-c380497ae68d",
              "parentUUID": "4c8eaf83-b682-4ed1-b4e8-bf8ec80b17b9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Filtering an empty shopping cart with invalid predicate throws error",
              "fullTitle": "Use for searching/filtering the products Filtering an empty shopping cart with invalid predicate throws error",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect((()=>{ filter([], oneArgPredicate)})).to.throw(TypeError);",
              "err": {
                "message": "AssertionError: expected [Function] to throw TypeError",
                "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///D:/3rd%20sem/software%20testing/assignment/Software-Testing/test/filter.test.js:37:60)\n    at processImmediate (node:internal/timers:464:21)",
                "diff": null
              },
              "uuid": "cee45fc8-7cb7-436a-ac4c-7e8232d04d0b",
              "parentUUID": "4c8eaf83-b682-4ed1-b4e8-bf8ec80b17b9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Filtering an empty shopping cart with a predicate and one arg result in the empty array value",
              "fullTitle": "Use for searching/filtering the products Filtering an empty shopping cart with a predicate and one arg result in the empty array value",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(function(){ filter(arrayValue, invalidPredicate) }).to.deep.eq([]);",
              "err": {
                "message": "AssertionError: expected [Function] to deeply equal []",
                "estack": "AssertionError: expected [Function] to deeply equal []\n    at Context.<anonymous> (file:///D:/3rd%20sem/software%20testing/assignment/Software-Testing/test/filter.test.js:41:74)\n    at processImmediate (node:internal/timers:464:21)",
                "diff": null
              },
              "uuid": "ad0702c6-34af-41a0-895d-ed248ea93b31",
              "parentUUID": "4c8eaf83-b682-4ed1-b4e8-bf8ec80b17b9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "46ef6c96-a226-48b5-af5d-2a1ddf838ac9",
            "6a52a621-6b3f-4135-8641-f0a11c05920e",
            "c0eb6b5a-265e-4aed-8922-3125b59b2061"
          ],
          "failures": [
            "92f12c78-2aaf-4c4d-9546-c3c592c0bc80",
            "64e4a9c5-3552-4354-a544-e6f305d7daac",
            "2bc9fea5-dbb7-4d74-9a59-c380497ae68d",
            "cee45fc8-7cb7-436a-ac4c-7e8232d04d0b",
            "ad0702c6-34af-41a0-895d-ed248ea93b31"
          ],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5d9f3784-49f1-4405-8edf-a9561c253940",
          "title": "Check if the value is date or not",
          "fullFile": "D:\\3rd sem\\software testing\\assignment\\Software-Testing\\test\\isDate.test.js",
          "file": "\\test\\isDate.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Returns true if date object is passed",
              "fullTitle": "Check if the value is date or not Returns true if date object is passed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isDate(new Date())).to.be.true;",
              "err": {},
              "uuid": "89833e48-34d2-44c7-8a03-0f10789846c7",
              "parentUUID": "5d9f3784-49f1-4405-8edf-a9561c253940",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Returns false if date string is passed",
              "fullTitle": "Check if the value is date or not Returns false if date string is passed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isDate('2021-11-12')).to.be.false;",
              "err": {},
              "uuid": "9201ea55-f1f2-4796-ad62-4f54629d2b2c",
              "parentUUID": "5d9f3784-49f1-4405-8edf-a9561c253940",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Returns false if null is passed",
              "fullTitle": "Check if the value is date or not Returns false if null is passed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isDate(null)).to.be.false;",
              "err": {},
              "uuid": "bc6def04-11a4-43e5-91f3-b850c0363185",
              "parentUUID": "5d9f3784-49f1-4405-8edf-a9561c253940",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Returns false if number is passed",
              "fullTitle": "Check if the value is date or not Returns false if number is passed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isDate(20)).to.be.false;",
              "err": {},
              "uuid": "55307897-8e37-487b-a507-3c9d6915f401",
              "parentUUID": "5d9f3784-49f1-4405-8edf-a9561c253940",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Returns false if undefined is passed",
              "fullTitle": "Check if the value is date or not Returns false if undefined is passed",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isDate(undefined)).to.be.false;",
              "err": {},
              "uuid": "e4e97295-1e66-45eb-85ea-35d0748c48df",
              "parentUUID": "5d9f3784-49f1-4405-8edf-a9561c253940",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Returns false if false value is passed",
              "fullTitle": "Check if the value is date or not Returns false if false value is passed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isDate(false)).to.be.false;",
              "err": {},
              "uuid": "56fe465c-2f3c-4609-9789-dcefb6b2759f",
              "parentUUID": "5d9f3784-49f1-4405-8edf-a9561c253940",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "89833e48-34d2-44c7-8a03-0f10789846c7",
            "9201ea55-f1f2-4796-ad62-4f54629d2b2c",
            "bc6def04-11a4-43e5-91f3-b850c0363185",
            "55307897-8e37-487b-a507-3c9d6915f401",
            "e4e97295-1e66-45eb-85ea-35d0748c48df",
            "56fe465c-2f3c-4609-9789-dcefb6b2759f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "57935d83-9c93-48df-baeb-b76fcedb2b84",
          "title": "Use in the product of array and return the array result of product.",
          "fullFile": "D:\\3rd sem\\software testing\\assignment\\Software-Testing\\test\\map.test.js",
          "file": "\\test\\map.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "mapping a empty array with Function with 1 arg gives empty array",
              "fullTitle": "Use in the product of array and return the array result of product. mapping a empty array with Function with 1 arg gives empty array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(map([], invalidFunction)).to.deep.eq([]);",
              "err": {},
              "uuid": "d31bb691-1475-4105-83ca-f242b3b02ccb",
              "parentUUID": "57935d83-9c93-48df-baeb-b76fcedb2b84",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "map a non-empty array with a non array function throws error",
              "fullTitle": "Use in the product of array and return the array result of product. map a non-empty array with a non array function throws error",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  map(arrayValue, nonArrayValue);\n}).to.throw(TypeError);",
              "err": {},
              "uuid": "2697ca32-5c42-407b-be07-73aeb80e4266",
              "parentUUID": "57935d83-9c93-48df-baeb-b76fcedb2b84",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "map a non-empty array with a function with 1 arg is mapped correctly",
              "fullTitle": "Use in the product of array and return the array result of product. map a non-empty array with a function with 1 arg is mapped correctly",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(map(arrayValue, oneArgFunction)).to.deep.equal(mappedArrayValue);",
              "err": {},
              "uuid": "b65a3f4b-70b0-485d-9274-ec02365f9270",
              "parentUUID": "57935d83-9c93-48df-baeb-b76fcedb2b84",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "map a non-empty array without a function arg throws type error",
              "fullTitle": "Use in the product of array and return the array result of product. map a non-empty array without a function arg throws type error",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  map(arrayValue);\n}).to.throw(TypeError);",
              "err": {},
              "uuid": "1c95f8bb-5abd-4654-ac4a-04018c773cba",
              "parentUUID": "57935d83-9c93-48df-baeb-b76fcedb2b84",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "map a non-empty array with invalid function throws type error",
              "fullTitle": "Use in the product of array and return the array result of product. map a non-empty array with invalid function throws type error",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  map(arrayValue, invalidFunction);\n}).to.throw(TypeError);",
              "err": {},
              "uuid": "bc2c5ee7-209f-4b36-9d30-fc9786cbc010",
              "parentUUID": "57935d83-9c93-48df-baeb-b76fcedb2b84",
              "isHook": false,
              "skipped": false
            },
            {
              "title": " map with no arguments throws error",
              "fullTitle": "Use in the product of array and return the array result of product.  map with no arguments throws error",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(function(){ map() }).to.throw(TypeError);",
              "err": {
                "message": "AssertionError: expected [Function] to throw TypeError",
                "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///D:/3rd%20sem/software%20testing/assignment/Software-Testing/test/map.test.js:38:41)\n    at processImmediate (node:internal/timers:464:21)",
                "diff": null
              },
              "uuid": "b7f45252-72ac-4b39-9e63-965f73d43a61",
              "parentUUID": "57935d83-9c93-48df-baeb-b76fcedb2b84",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d31bb691-1475-4105-83ca-f242b3b02ccb",
            "2697ca32-5c42-407b-be07-73aeb80e4266",
            "b65a3f4b-70b0-485d-9274-ec02365f9270",
            "1c95f8bb-5abd-4654-ac4a-04018c773cba",
            "bc2c5ee7-209f-4b36-9d30-fc9786cbc010"
          ],
          "failures": [
            "b7f45252-72ac-4b39-9e63-965f73d43a61"
          ],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6ba37209-78bf-4534-a965-43d37095b864",
          "title": "Convert to number",
          "fullFile": "D:\\3rd sem\\software testing\\assignment\\Software-Testing\\test\\toNumber.test.js",
          "file": "\\test\\toNumber.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "convert a string integer number to the number",
              "fullTitle": "Convert to number convert a string integer number to the number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"10\")).to.eq(10);",
              "err": {},
              "uuid": "a8500345-e2e9-4e4c-ae8f-4ef5d9027e8a",
              "parentUUID": "6ba37209-78bf-4534-a965-43d37095b864",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "convert a symbol returns NaN",
              "fullTitle": "Convert to number convert a symbol returns NaN",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(Symbol())).to.deep.eq(NaN);",
              "err": {},
              "uuid": "3f27ed19-fece-45a7-95f1-55a7c63dd286",
              "parentUUID": "6ba37209-78bf-4534-a965-43d37095b864",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "convert a non number string returns NaN",
              "fullTitle": "Convert to number convert a non number string returns NaN",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"Software testing\")).to.deep.eq(NaN);",
              "err": {},
              "uuid": "b7ebf355-02ba-4755-872f-a0d97ee653d8",
              "parentUUID": "6ba37209-78bf-4534-a965-43d37095b864",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Converting the object to number return NaN",
              "fullTitle": "Convert to number Converting the object to number return NaN",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber({ shirt: \"Gant\", Pant: \"Levis\" })).to.deep.eq(NaN);",
              "err": {},
              "uuid": "2efcadf0-949a-45b1-aa63-e6d0ba062bb4",
              "parentUUID": "6ba37209-78bf-4534-a965-43d37095b864",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "array as an input returns NaN",
              "fullTitle": "Convert to number array as an input returns NaN",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber([1, 2, 3])).to.deep.eq(NaN);",
              "err": {},
              "uuid": "d60d01b4-8242-49f2-8507-917ca04d9848",
              "parentUUID": "6ba37209-78bf-4534-a965-43d37095b864",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "converts hex string into a number",
              "fullTitle": "Convert to number converts hex string into a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"0xBF57C\")).to.eq(783740);",
              "err": {},
              "uuid": "a0b6ec16-3c53-4f2d-b439-efba839e60d3",
              "parentUUID": "6ba37209-78bf-4534-a965-43d37095b864",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "converts octal string into a number",
              "fullTitle": "Convert to number converts octal string into a number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"0o52\")).to.equal(42);",
              "err": {},
              "uuid": "8882ecc2-9d60-42f8-b839-0755ccfcbdb6",
              "parentUUID": "6ba37209-78bf-4534-a965-43d37095b864",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "converts binary string into a number",
              "fullTitle": "Convert to number converts binary string into a number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"0b1011\")).to.equal(11);",
              "err": {},
              "uuid": "db4703bb-64af-4d6c-8b49-28e6611c64e9",
              "parentUUID": "6ba37209-78bf-4534-a965-43d37095b864",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Empty input return NaN",
              "fullTitle": "Convert to number Empty input return NaN",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber()).to.deep.eq(NaN);",
              "err": {},
              "uuid": "4aaf4bfa-c4d1-4a7c-ab6c-e1d344d0eae6",
              "parentUUID": "6ba37209-78bf-4534-a965-43d37095b864",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a8500345-e2e9-4e4c-ae8f-4ef5d9027e8a",
            "3f27ed19-fece-45a7-95f1-55a7c63dd286",
            "b7ebf355-02ba-4755-872f-a0d97ee653d8",
            "2efcadf0-949a-45b1-aa63-e6d0ba062bb4",
            "d60d01b4-8242-49f2-8507-917ca04d9848",
            "a0b6ec16-3c53-4f2d-b439-efba839e60d3",
            "8882ecc2-9d60-42f8-b839-0755ccfcbdb6",
            "db4703bb-64af-4d6c-8b49-28e6611c64e9",
            "4aaf4bfa-c4d1-4a7c-ab6c-e1d344d0eae6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}